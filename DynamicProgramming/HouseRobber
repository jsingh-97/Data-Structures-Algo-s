/*
You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.
Input:
[1,3,1,3,100]
Output:
101
Expected:
103


Steps
1. Calculate maximum money that robber can rob by excluding first house.
2. Calculate maximum money that robber can rob by excluding last house.
3. Return the maximum of both
*/
class Solution {
    public int rob(int[] nums) {
        // handling cases when only 1 house exists
        if(nums.length==1)
            return nums[0];
        int secondLast=nums[0];
        int last=nums[1];
        //getting maximum money by excluding last house
        for(int i=2;i<nums.length-1;i++)
        {
            int val=Math.max(last,secondLast+nums[i]);
            secondLast=Math.max(last,secondLast);
            last=val;
        }
        int ans1=Math.max(last,secondLast);
        //when only two houses exists
        if(nums.length==2)
            return ans1;
         secondLast=nums[1];
         last=nums[2];
        // getting maximum money by excluding first house
        for(int i=3;i<nums.length;i++)
        {
            int val=Math.max(last,secondLast+nums[i]);
            secondLast=Math.max(last,secondLast);
            last=val;
        }
        int ans2=Math.max(last,secondLast);
        return Math.max(ans1,ans2);
    }
}
