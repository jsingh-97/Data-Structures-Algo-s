/*
equations = [["a","b"],["b","c"]], values = [2.0,3.0], queries = [["a","c"],["b","a"],["a","e"],["a","a"],["x","x"]]
Output - [6.00000,0.50000,-1.00000,1.00000,-1.00000]
*/

class Solution {
    
    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {
        HashMap<String,HashMap<String,Double>> graph=new HashMap<>();
        graph=buildGraph(equations,values);
        double[] res=new double[queries.size()];
        for(int i=0;i<queries.size();i++){
            double ans=dfs(queries.get(i).get(0),queries.get(i).get(1),graph,new HashSet<String>());
            res[i]=ans;
        }
        return res;
    }
    HashMap<String,HashMap<String,Double>> buildGraph(List<List<String>> equations,double[] values){
        HashMap<String,HashMap<String,Double>> graph=new HashMap<>();
        for(int i=0;i<equations.size();i++){
            String a=equations.get(i).get(0);
            String b=equations.get(i).get(1);
            double val=values[i];
            graph.putIfAbsent(a,new HashMap<>());
            graph.get(a).put(b,val);
            graph.putIfAbsent(b,new HashMap<>());
            graph.get(b).put(a,1/val);
        }
        return graph;
    }
    public double dfs(String source,String end,HashMap<String,HashMap<String,Double>> graph,Set<String> visited){
        // base cases
        if(!graph.containsKey(source))
            return -1.0;
        if(source.equals(end))
            return 1.0;
        if(graph.get(source).containsKey(end))
            return graph.get(source).get(end);
        
        visited.add(source);
        for(Map.Entry<String, Double> neighbour : graph.get(source).entrySet()){
            if(!visited.contains(neighbour.getKey())){
                double ans=dfs(neighbour.getKey(),end,graph,visited);
                if(ans!=-1)
                    return ans*neighbour.getValue();
                visited.remove(source);
            }
        }
        return -1;
    }
}
