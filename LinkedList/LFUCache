//HashMap to store key node mapping
//Another hashMap to store frequency and Doubly linkedlist (double linked list of all the nodes with same frequency)

import java.util.HashMap;
import java.util.Map;

class LFUCache {
    HashMap<Integer,Node> cacheMap;
    HashMap<Integer,DLL> freqMap;
    int minFreq;
    int capacity;
    class Node{
      int key;
      int val;
      int count;
      Node prev;
      Node next;
      public Node(int key,int val){
        this.key=key;
        this.val=val;
        this.count=1;
        this.next=null;
        this.prev=null;
      }
    }
    public LFUCache(int capacity) {
        cacheMap=new HashMap<Integer,Node>(capacity);
        freqMap=new HashMap<Integer,DLL>();
        minFreq=0;
        this.capacity=capacity;
    }
    private void removeNodeFromFreqMap(Node node){
      DLL dll=freqMap.get(node.count);
      //remove node from the DLL of count
      dll.removeNode(node);
      if(dll.head==null && node.count==minFreq){
        minFreq++;
      }
    }
    private void insertNodeInFreqMap(Node node){
      if(!freqMap.containsKey(node.count)){
        freqMap.put(node.count,new DLL());
      }
      DLL dll=freqMap.get(node.count);
      //insert node at the head of DLL of new count
      dll.insertAtHead(node);
    }
    public int get(int key) {
        if(cacheMap.containsKey(key)){
          //get node's address from cachemap
          Node node=cacheMap.get(key);
          removeNodeFromFreqMap(node);
          //update the count
          node.count=node.count+1;
          insertNodeInFreqMap(node);
          return node.val;
        }else{
          return -1;
        }
    }
    
    public void put(int key, int value) {
      //edge cases
      if(capacity==0)return;
      //if key exists
      if(cacheMap.containsKey(key)){
        Node node=cacheMap.get(key);

        removeNodeFromFreqMap(node);
        //update the count
        node.count=node.count+1;
        node.val=value;
        insertNodeInFreqMap(node);
        cacheMap.put(key,node);
      }else{
        Node node=new Node(key,value);
        //cache is not full
        if(cacheMap.size()<capacity){
          minFreq=1;
          //insert in frequencyMap
          insertNodeInFreqMap(node);
          //insert in cacheMap
          cacheMap.put(key,node);
        }else{
          //cache is full
          DLL dll=freqMap.get(minFreq); 
          cacheMap.remove(dll.tail.key);
          dll.removeNode(dll.tail);
          cacheMap.put(key,node);
          minFreq=1;
          insertNodeInFreqMap(node);
        }
       
        
      }
    }
  
  class DLL{
    Node head;
    Node tail;
    DLL(){
      head=null;
      tail=null;
    }
    //insert node at head in the DLL
    public void insertAtHead(Node node){
      //if head is null
      if(head==null){
        head=node;
        tail=head;
        head.next=null;head.prev=null;
      }else{
        node.next=head;
        head.prev=node;
        head=node;
      }
    }
    //removes node from the DLL
    public void removeNode(Node node){
      //if this is the only node in DLL
      if(head==tail){
        head=null;
        tail=null;
      }else if(head==node){
        head=node.next;
        head.prev=null;
      }else if(tail==node){
        tail=node.prev;
        tail.next=null;
      }else{
        node.prev.next=node.next;
        node.next.prev=node.prev;
      }
    }    
  }
  public static void main(String[] args) {

    LFUCache cache = new LFUCache( 2 /* capacity */ );

    cache.put(1, 1);
    cache.put(2, 2);
   // System.out.println(cache.get(1));      
    cache.put(3, 3);    // evicts key 2
   // System.out.println(cache.get(2));       
   // System.out.println(cache.get(3));      
    cache.put(4, 4);    // evicts key 1.
    System.out.println(cache.get(1));      
    System.out.println(cache.get(3));      
    System.out.println(cache.get(4));
    System.out.println(cache.get(2)); 
  }

}
