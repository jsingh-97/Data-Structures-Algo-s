/*
 https://leetcode.com/problems/flatten-a-multilevel-doubly-linked-list/
 
You are given a doubly linked list which in addition to the next and previous pointers, it could have a child pointer, which may or may not point to a separate doubly linked list. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure, as shown in the example below.

Flatten the list so that all the nodes appear in a single-level, doubly linked list. You are given the head of the first level of the list.



Example 1:

Input: head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]
Output: [1,2,3,7,8,11,12,9,10,4,5,6]
*/


class Solution {
    public Node flatten(Node head) {
        Node[] arr= new Node[2];
        arr= helper(head);
        return arr[0];
    }
    private static Node[]  helper(Node head){
        if(head==null){
            return new Node[]{null,null};
        }
        // if single node without any child
        if(head.next==null && head.child==null){
            return new Node[]{head,head};
        }
        // if current node has child then flatten the child list first
        Node temp = head.next;
         Node [] arr = new Node[2];
        if(head.child!=null){
            arr = helper(head.child);
            head.child=null;
            head.next=arr[0];
            arr[0].prev=head;
            arr[1].next=temp;
            if(temp!=null)
                temp.prev=arr[1];
        }
        if(temp!=null)
        arr = helper(temp);
        
        return new Node[]{head,arr[1]};
    }
}
