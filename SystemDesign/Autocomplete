//https://leetcode.com/problems/design-search-autocomplete-system/
import java.util.*;

class AutocompleteSystem {
    Trie trie;
    boolean lastPrefixMatched;
    class Pair{
        String first;
        int second;
        Pair(String f,int s){
            this.first=f;
            this.second=s;
        }

        public String getFirst() {
            return first;
        }

        public void setFirst(String first) {
            this.first = first;
        }

        public int getSecond() {
            return second;
        }

        public void setSecond(int second) {
            this.second = second;
        }
    }
    class Trie{
        class Node{
            boolean isWord;
            int count;
            Node[] children;
            Node(){
                this.children=new Node[27];
                for(int i=0;i<27;i++){
                    this.children[i]=null;
                }
                isWord=false;
                count=0;
            }
        }
        Node root;
        HashMap<Character,Integer> hsmap;
        StringBuilder sb=new StringBuilder();
        Trie(){
            root=new Node();
            hsmap=new HashMap<>();
            for(char ch='a';ch<='z';ch++){
                hsmap.put(ch,ch-97);
            }
            hsmap.put(' ',26);
        }

        public void insert(String word,int count){
            insertHelper(root,0,word,count);
        }
        public void insertHelper(Node root,int index,String word,int count){
            int val=hsmap.get(word.charAt(index));
            if(root.children[val]==null){
                Node node=new Node();
                root.children[val]=node;
            }
            if(index==(word.length()-1)){
                root.children[val].isWord=true;
                root.children[val].count+=count;
            }else{
                insertHelper(root.children[val],index+1,word,count);
            }
        }
        public List<Pair> search(String prefix){
            List<Pair> ls=new ArrayList<>();
            Node node=searchHelper(root,0,prefix);
            StringBuilder str=new StringBuilder();
            str.append(prefix);
            recurse(node,ls,str);
            return ls;
        }
        private void recurse(Node node,List<Pair> ls,StringBuilder str){
            if(node==null) return;
            if(node.isWord==true){
                ls.add(new Pair(str.toString(),node.count));
            }
            for(int i=0;i<27;i++){
                char ch=getChar(i);
                str.append(ch);
                recurse(node.children[i],ls,str);
                str.deleteCharAt(str.length()-1);
            }
        }
        private char getChar(int i){
            if(i==26) return ' ';
            else return (char)(97+i);
        }
        private Node searchHelper(Node root,int index,String prefix){
            if(root==null) return null;
            int val=hsmap.get(prefix.charAt(index));
            if((index+1)==prefix.length()) return root.children[val];
            return searchHelper(root.children[val],index+1,prefix);
        }
    }
    public AutocompleteSystem(String[] sentences, int[] times) {
        trie=new Trie();
        for(int i=0;i<sentences.length;i++){
            trie.insert(sentences[i],times[i]);
        }
        lastPrefixMatched=true;
    }

    public List<String> input(char c) {
        if(c=='#'){
            trie.insert(trie.sb.toString(),1);
            trie.sb.setLength(0);
            lastPrefixMatched=true;
            return new ArrayList<>();
        }else{
            trie.sb.append(c);
            if(lastPrefixMatched==false){
                return new ArrayList<>();
            }
            List<Pair> ls=trie.search(trie.sb.toString());
            List<String> ans=findTop3(ls);
            if(ans.size()==0){
                lastPrefixMatched=false;
            }
            return ans;
        }
    }
    private List<String> findTop3(List<Pair> ls){
        List<String> ans=new ArrayList<>();
        PriorityQueue<Pair> pq=new PriorityQueue<>(new Comparator<Pair>() {
            @Override
            public int compare(Pair p1, Pair p2) {
                if(p2.getSecond()==p1.getSecond()){
                    return p2.getFirst().compareTo(p1.getFirst());
                }
                return p1.getSecond()-p2.getSecond();
            }
        });
        for(Pair p:ls){
            pq.offer(p);
            if(pq.size()>3) pq.poll();
        }
        while(!pq.isEmpty()){
            ans.add(pq.poll().getFirst());
        }
        return ans;
    }
    public static void main(String[] args){
        String[] sentences={"i love you","island","iroman","i love leetcode"};
        int[] times=new int[]{5,3,2,2};
        AutocompleteSystem obj = new AutocompleteSystem(sentences, times);
        List<String> ls=obj.input('i');
        ls.forEach(str-> System.out.println(str));
        System.out.println("2");
        ls=obj.input(' ');
        ls.forEach(str-> System.out.println(str));
        System.out.println("3");
        ls=obj.input('a');
        ls.forEach(str-> System.out.println(str));

    }
}
