//Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.
//push(x) -- Push element x onto stack.
//pop() -- Removes the element on top of the stack.
//top() -- Get the top element.
//getMin() -- Retrieve the minimum element in the stack.
//Solution 1 store element and minelement in its down stack including that element in stack.
//Solution 2 Use another stack to store min element.
import java.util.Stack;

class MinStack {

  Stack <Integer> st;
  Stack <Integer> minStack;
  /** initialize your data structure here. */
  public MinStack() {
    this.st=new Stack<Integer>();
    this.minStack=new Stack <Integer>();
    this.minStack.push(Integer.MAX_VALUE);
  }

  public void push(int x) {
    if(x<=minStack.peek())
    {
      minStack.push(x);
    }
    st.push(x);
  }

  public void pop() {
    if(st.peek().equals(minStack.peek()))
    {
      minStack.pop();
    }
    st.pop();
  }

  public int top() {
    return st.peek();
  }

  public int getMin() {
    return minStack.peek();
  }

  public static void main(String[] args) {

    MinStack minStack = new MinStack();
    minStack.push(512);
    minStack.push(-1024);
    minStack.push(-1024);
    minStack.push(512);
    minStack.pop();
    minStack.getMin(); // return -3
    minStack.pop();
    minStack.getMin();
    minStack.pop();
    minStack.getMin();

  }



}
