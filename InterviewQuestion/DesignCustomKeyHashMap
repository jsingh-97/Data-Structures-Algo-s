/*
Question- How to design good custom key object for HashMap;
The very basic need for designing a good key is that “we should be able to retrieve the value object back from the map without failure“, otherwise no matter how fancy data structure you build, it will be of no use. To decide that we have created a good key, we MUST know that “how HashMap works?”.
For this purpose you can make good custom key object for HashMap if you follows the contract between equals and override method that is mentioned below 
1.1. Contract between hashCode() and equals()
It is generally necessary to override the hashCode() method whenever equals() method is overridden, so as to maintain the general contract for the hashCode() method, which states that equal objects must have equal hash codes.

Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified.
This integer need not remain consistent from one execution of an application to another execution of the same application.
If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result.
It is not required that if two objects are unequal according to the equals(java.lang.Object) method, then calling the hashCode method on each of the two objects must produce distinct integer results. 
*/
import java.util.HashMap;
import java.util.Set;

public class Demo {

  int uid;
  String name;

  public Demo(int uid, String name) {
    this.uid = uid;
    this.name = name;
  }

  public int getUid() {
    return uid;
  }

  public void setUid(int uid) {
    this.uid = uid;
  }

  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }
  @Override
  public int hashCode()
  {
    return getUid();
  }
  @Override
  public boolean equals(Object obj)
  {
    if(obj==null) return false;
    if(this==null)
      return  false;
    if(getClass()!=obj.getClass()) return false;
    Demo d=(Demo) obj;
    if(this==obj) return true;
    if(getUid()==d.getUid()) return true;
    return false;
  }
  public static void main(String[] args)
  {
    HashMap<Demo,String> hsmap=new HashMap<>();
    Demo d1=new Demo(1,"Nimrat");
    hsmap.put(d1,"Mumbai");
    d1=new Demo(2,"Jassi");
    hsmap.put(d1,"Chennai");
    Demo d3=new Demo(1, "Nimrat");
    System.out.println(hsmap.get(d1));
    System.out.println(hsmap.get(d3));
  }
}
