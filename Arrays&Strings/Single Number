/*We will be using bit manipulation to find two elements that appear exactly once.
1. XOR all the elements.
2. Find the rightmost set bit in the xor result.
3. Now separate the numbers into groups by using this bit.
4. Finally xor all the elements in these groups to get the final elements.
*/

class Solution {
    public int[] singleNumber(int[] nums) {
        int xor = 0;
        for(int i=0;i<nums.length;i++)
        {
            xor^=nums[i];
        }
        // getting last set bit
        int lastSetBit= Integer.highestOneBit(xor);
        int [] ans={0,0};
        for(int i=0;i<nums.length;i++)
        {
            if((lastSetBit & nums[i])==0)
                ans[0]^=nums[i];
                else
                    ans[1]^=nums[i];
        }
        return ans;
    }
}
