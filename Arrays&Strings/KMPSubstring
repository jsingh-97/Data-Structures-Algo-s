// Time Complexity O(m+n)
// Space Complexity O(m)
// where m is pattern's length and n is Haystack length
import java.util.Scanner;

public class KMPSubstring {

  public static void main(String[] saf)
  {
    Scanner sc=new Scanner(System.in);
    int t=0;
    t=sc.nextInt();
    while(t>0)
    {
      String pattern=sc.next();
      String haystack=sc.next();
      System.out.println(findPattern(pattern,haystack));
      t--;
    }

  }

  private static boolean findPattern(String pattern, String haystack) {
    int[] lps=getLongestPrefixSuffix(pattern);
    int i=0; //index used to traverse haystack
    int j=0; //index used to traverse pattern
    while(i<haystack.length() && j<pattern.length())
    {
      if(pattern.charAt(j)==haystack.charAt(i))
      {
        i++;
        j++;
      }
      else
      {
        if(j!=0)
        {j=lps[j-1];}
        else
        {
          i++;
        }
      }
    }
    if(j==pattern.length())
      return true;
    return false;
  }

  private static int[] getLongestPrefixSuffix(String pattern) {
    int[] lps=new int[pattern.length()];
    lps[0]=0;
    int index=0;
    for(int i=1;i<pattern.length();)
    {
      if(pattern.charAt(index)==pattern.charAt(i))
      {

        lps[i]=index+1;
        i++;
        index++;
      }
      else
      {
        lps[i]=0;
        i++;
      }
    }
    return lps;
  }
}
